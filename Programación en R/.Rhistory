force(murders)
View(murders)
#así se crean variables en un data frame
murder_rate <- murders$total/muders$population*100000
murder_rate <- murders$total/muders$population*100000
library(dslabs)
data(murders)
#así se crean variables en un data frame
murder_rate <- murders$total/muders$population*100000
murder_rate <- murders$total/murders$population*100000
ind <- which.min(murder_rate)
if (murder_rate[ind] < 0.5 ){}
if (murder_rate[ind] < 0.5 ){
print(murders$state[ind])
} else {
print ("no state has murder rate that low")
}
a<-0
ifelse(a>0, 1/a, NA)
a<-c(0,1,2,-4,5)
result <- ifelse(a>0, 1/a, NA)
data("na_example")
sum(is.na(na_example))
no_nas <- ifelse(is.na(na_example),0,na_example)
z <- c(T, T,F)
any(z)
#any
"esta función detecta si hay al menos un TRUE"
z <- c(T, T,F)
all(z)
avg <- function(x){}
avg <- function(x){
s <- sum (x)
n <- length(x)
s/n
}
x<-1:1000
avg(x)
avg <- function(x, arithmetic=T){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
########## FOR LOOPS ###################
compute_s_n <- function(n)
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
compute_s_n(100)
compute_s_n(100)
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
compute_s_n(100)
for(i in 1:5){
print(i)
}
m <- 25
#1. create an empty vector
s_n <- vector(length=m)
for (i in 1:m){
s_n[n] <- compute_s_n(n)
}
m <- 25
#1. create an empty vector
s_n <- vector(length=m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
plot(n, s_n)
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
head(murders)
head(heights)
prop.table(table(heights$sex))
#así se hace un CDF
a <- seq(min(heights), max(heights), length = 100)    # define range of values spanning the dataset
cdf_function <- function(x) {    # computes prob. for a single value
mean(my_data <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
a <- seq(min(heights), max(heights), length = 100)    # define range of values spanning the dataset
cdf_function <- function(x) {    # computes prob. for a single value
mean(heights <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
#así se hace un CDF
a <- seq(min(heights), max(heights))    # define range of values spanning the dataset
cdf_function <- function(x) {    # computes prob. for a single value
mean(heights <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
library(dslabs)
data(heights)
head(heights)
#obtener proporciones
prop.table(table(heights$sex))
#así se hace un CDF
a <- seq(min(heights), max(heights))    # define range of values spanning the dataset
cdf_function <- function(x) {    # computes prob. for a single value
mean(heights <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
index <- heights$sex=="Male"
index <- heights$sex=="Male"
x <- heights$height[index]
avg_1 <- sum(x)/length(x)
avg_2 <- mean(x)
SD_1 <- sqrt(sum((x-avg)^2)/length(x))
SD_2 <- sd(x)
index <- heights$sex=="Male"
x <- heights$height[index]
avg_1 <- sum(x)/length(x)
avg_2 <- mean(x)
SD_1 <- sqrt(sum((x - avg_2)^2)/length(x))
SD_2 <- sd(x)
c(average=avg_2, SD=SD_2)
z <- scale(x)
mean(abs(x)<2)
View(z)
z <- scale(x)
mean(abs(z)<2)
summary(heights$height)
p <- seq(0.01, 0.99, 0.01)
percentiles <- quantile(heights$height,p)
print(percentiles)
percentiles[names(percentiles)=="25%"]
p <- seq(0.01, 0.99, 0.01)
theoretical_quantiles <- qnorm(p, 69, 3)
print(z)
print(x)
x <- heights$height[heights$sex == "Male"]
index <- heights$sex=="Male"
x <- heights$height[index]
View(heights)
x <- heights$height
x <- heights$height[heights$sex == "Male"]
mean(x > 69 & x <= 72)
x <- heights$height[heights$sex == "Male"]
observed_quantiles <- quantile(x,p)
theoretical_quantiles <- qnorm(p, mean= mean(x), sd = sd(x))
plot (theoretical_quantiles, observed_quantiles)
abline(0,1)
observed_quantiles <- quantile(z, p)
theoretical_quantiles <- qnorm(p)
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)
View(murders)
hist(murder_rate)
observed_quantiles <- quantile(z, p)
theoretical_quantiles <- qnorm(p)
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)
hist(murder_rate)
z <- scale(murder_rate)
observed_quantiles <- quantile(z, p)
theoretical_quantiles <- qnorm(p)
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)
library(dslabs)
data(heights)
male <- heights$height[heights$sex=="Male"]
female <- heights$height[heights$sex=="Female"]
p <- seq(0.1,0.9,0.2)
percentiles_female <- quantile(female,p)
female_percentiles <- c("10th"=percentiles_female[names(percentiles_female)=="10%"], "30th"=percentiles_female[names(percentiles_female)=="30%"],"50th"=percentiles_female[names(percentiles_female)=="50%"],"70th"=percentiles_female[names(percentiles_female)=="70%"],"90th"=percentiles_female[names(percentiles_female)=="90%"])
percentiles_male <- quantile(male,p)
male_percentiles <- c("10th"=percentiles_male[names(percentiles_male)=="10%"], "30th"=percentiles_male[names(percentiles_male)=="30%"],"50th"=percentiles_male[names(percentiles_male)=="50%"],"70th"=percentiles_male[names(percentiles_male)=="70%"],"90th"=percentiles_male[names(percentiles_male)=="90%"])
df <- data.frame(female = female_percentiles, male=male_percentiles)
View(df)
library(tidyverse)
data(murders)
library(dslabs)
data(murders)
library(dslabs)
data(murders)
force(murders)
View(murders)
murders %>% ggplot()
library(tidyverse)
library(dslabs)
data(murders)
p <- ggplot(data=murders)
murders %>% ggplot()
p
View(p)
murders %>% ggplot() +
geom_point(aes(population/10^6, total))
p + geom_point(aes(population,total))
p + geom_point(aes(population,total)) + geom_text(aes(population/10^6, total, label = abb))
p + geom_point(aes(population/10^6,total)) + geom_text(aes(population/10^6, total, label = abb))
p + geom_point(aes(population/10^6,total)) + geom_label(aes(population/10^6, total, label = abb))
p + geom_point(aes(population/10^6,total), size = 3) + geom_text(aes(population/10^6, total, label = abb))
p + geom_point(aes(population/10^6,total), size = 3) + geom_text(aes(population/10^6, total, label = abb), nudge_x = 1)
p <- murders %>% ggplot(aes(population/10^6, total, label = abb))
p + geom_point(size=3) + geom_text(nudge_x = 1.5)
p + geom_point(size=3) + geom_text(nudge_x = 1.5) + geom_text(10,800,"Hello there")
p + geom_point(size=3) + geom_text(nudge_x = 1.5) + geom_text(aes(10,800,"Hello there"))
p + geom_point(size=3) + geom_text(aes(10,800,"Hello there"), nudge_x = 1.5)
p + geom_point(size=3) + geom_text(aes(10,800,label="Hello there"), nudge_x = 1.5)
p + geom_point(size=3) + geom_text(nudge_x = 0.05) + scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
p + geom_point(size=3) + geom_text(nudge_x = 0.075) + scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
p + geom_point(size=3) + geom_text(nudge_x = 0.025) + scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
p + geom_point(size=3) + geom_text(nudge_x = 0.025) + scale_x_log10() + scale_y_log10()
p + geom_point(size=3) + geom_text(nudge_x = 0.025) + scale_x_log10() + scale_y_log10() +
xlab("Population in millions (log scale)") + ylab("total murders (log scale)") + ggtitle("US Gun Murders")
xlab("Population in millions (log scale)") + ylab("total murders (log scale)") + ggtitle("US Gun Murders")
p <- murders %>% geom_point(size=3) + geom_text(nudge_x = 0.025) + scale_x_log10() + scale_y_log10() +
xlab("Population in millions (log scale)") + ylab("total murders (log scale)") + ggtitle("US Gun Murders")
p <- murders %>% ggplot() + geom_point(aes(population/10^6, total)) + geom_point(size=3) + geom_text(nudge_x = 0.025) +
scale_x_log10() + scale_y_log10() +xlab("Population in millions (log scale)") + ylab("total murders (log scale)") +
ggtitle("US Gun Murders")
p <- murders %>% ggplot() + geom_point(aes(population/10^6, total), size = 3) + geom_text(nudge_x = 0.025) +
scale_x_log10() + scale_y_log10() +xlab("Population in millions (log scale)") + ylab("total murders (log scale)") +
ggtitle("US Gun Murders")
p + geom_point(color="blue")
p + geom_point(size=3, color="blue")
p + geom_point(aes(population/10^6, total),size=3, color="blue")
p <- murders %>% ggplot() + geom_point(aes(population/10^6, total, label = abb), size = 3) + geom_text(nudge_x = 0.025) +
scale_x_log10() + scale_y_log10() +xlab("Population in millions (log scale)") + ylab("total murders (log scale)") +
ggtitle("US Gun Murders")
p <- murders %>% ggplot(aes(population/10^6, total, label = abb), size = 3) + geom_text(nudge_x = 0.025) +
scale_x_log10() + scale_y_log10() +xlab("Population in millions (log scale)") + ylab("total murders (log scale)") +
ggtitle("US Gun Murders")
p + geom_point(size=3, color="blue")
p + geom_point(aes(col=region), size = 3)
p + geom_point(aes(col=region), size = 3) + geom_text(nudge_x = 0.05)
p <- murders %>% ggplot(aes(population/10^6, total, label = abb), size = 3) + geom_text(nudge_x = 0.05) +
scale_x_log10() + scale_y_log10() +xlab("Population in millions (log scale)") + ylab("total murders (log scale)") +
ggtitle("US Gun Murders")
p + geom_point(aes(col=region), size = 3)
r <- murders %>% summarise(rate=sum(total)/sum(population)*10^6) %>% .rate
r <- murders %>% summarise(rate=sum(total)/sum(population)*10^6) %>% pull(rate)
View(murders)
r <- murders %>% rate=sum(total)/sum(population)*10^6
r <- murders %>% sum(total)/sum(population)*10^6
r <- murders %>% sum(murders$total)/sum(murders$population)*10^6
r <- murders %>% total/population*10^6
r <- murders %>% summarize(rate = sum(total) / sum(population) * 10^6)
View(r)
r <- murders %>% summarize(rate = sum(total) / sum(population) * 10^6) %>% pull(r)
r <- murders %>% summarize(rate = sum(total) / sum(population) * 10^6) %>% pull(rate)
p + geom_point(aes(col=region), size = 3) + geom_abline(intercept = log10(r))
p + geom_point(aes(col=region), size = 3) + geom_abline()
p + geom_point(aes(col=region), size = 3) + geom_abline(intercept = log10(r))
p +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region), size = 3)
p <- p + scale_color_discrete(name = "Region")    # capitalize legend title
p + geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") + geom_point(aes(col = region), size = 3)
View(murders)
r_1 <- murders %>% mutate(sum(total) / sum(population) * 10^6)
View(r_1)
murders <- murders %>% mutate(sum(total) / sum(population) * 10^6)
